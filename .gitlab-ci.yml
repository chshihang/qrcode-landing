workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_TAG != null'

variables:
  YZ_DING_TOKEN: "c2a28aa26b9c75099c51d504de423319ee0c6268d385be921ae66cca2ee1f24e"
  # 工程名称唯一
  PROJECT_NAME: "${CI_PROJECT_TITLE}"
  DB_NAME: "qrcodeLanding"
  DB_USER: "qrcodeLanding"
  DB_PASSWORD: "qrcodeLanding"
  DB_ROOT_PASSWORD: "yunzhi.club"
  HTTP_EXPORT_PORT: 17095
  DB_EXPORT_PORT: 17395
  DB_CPUS: 1
  DB_MEMORY: "1G"
  API_CPUS: 1
  API_MEMORY: "2G"


stages:
  # 测试，发布，通知
  - unit-test
  - build
  - deploy
  - notify

angular-test:
  # 前台使用docker来构建
  tags:
    - docker
  # 设置该管道属于的步骤，同步骤的管道并行执行
  stage: unit-test
  image: registry.cn-beijing.aliyuncs.com/mengyunzhi/node-chrome:18.16.0
  cache:
    - key:
       files:
          - web/package-lock.json
      paths:
        - web/node_modules
  before_script:
    - cd web
  script:
    - env
    - pwd
    # 构建出错时，加入-d -dd 或 -ddd
    - npm config set registry https://registry.npm.taobao.org
    - npm install -dd
    - ng v
    - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
    - npm run build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

spring-test:
  # 后台使用docker来构建
  tags:
    - docker
  stage: unit-test
  image: maven:3.6-openjdk-8
  services:
    - name: mysql:5.7
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: qrcodeLanding
      command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
  cache:
    - key:
        files:
          - api/pom.xml
      paths:
        - /root/.m2
        - /usr/share/maven/ref/
  before_script:
    - cd api
  script:
    - env
    - mvn -v
    - mvn --batch-mode package
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

angular-build:
  tags:
    - docker
  stage: build
  artifacts:
    name: "dist"
    paths:
      - web/dist
  cache:
    - key:
        files:
          - web/package-lock.json
      paths:
        - web/node_modules
  image: registry.cn-beijing.aliyuncs.com/mengyunzhi/node-chrome:18.16.0
  before_script:
    - cd web
  script:
    - env
    - npm install -dd
    - npm run build
    - ls -a -l
  rules:
    - if: $CI_COMMIT_TAG != null
    
spring-build:
  tags:
    - docker
  stage: build
  image: maven:3.6-openjdk-8
  artifacts:
    name: "app.jar"
    paths:
      - api/app.jar
  cache:
    - key:
        files:
          - api/pom.xml
      paths:
        - api/.m2/repository
  script:
    - cd api
    - env
    - mvn -v
    - mvn package -Dmaven.test.skip -Dmaven.repo.local=${CI_PROJECT_DIR}/api/.m2/repository
    - mv target/*.jar app.jar
    - ls -a ../
    - ls -a 
    - ls -a .m2
    - ls -a .m2/repository
  rules:
    - if: $CI_COMMIT_TAG != null

deploy:
  tags:
    - debian-cd-pro
  stage: deploy
  dependencies:
    - spring-build
    - angular-build
  script:
    - ls -a -l
    - mkdir -p /home/app/${PROJECT_NAME}
    - mkdir -p /home/app/${PROJECT_NAME}/db
    - mkdir -p /home/app/${PROJECT_NAME}/backups
    - rm -f /home/app/${PROJECT_NAME}/nginx.conf
    - rm -f /home/app/${PROJECT_NAME}/app.jar
    - rm -f /home/app/${PROJECT_NAME}/application.yml
    - rm -rf /home/app/${PROJECT_NAME}/web
    - cp app.jar /home/app/${PROJECT_NAME}/app.jar
    - cp -r dist /home/app/${PROJECT_NAME}/web
    - sed -i "s/api-server/${PROJECT_NAME}-api/g" cd/nginx.conf
    - |
      sed "s/\$DB_PASSWORD/$DB_PASSWORD/g" cd/application.yml | sed "s/\$PROJECT_NAME/$PROJECT_NAME/g" | \
      sed "s/\$DB_NAME/$DB_NAME/g" | sed "s/\$DB_USER/$DB_USER/g" > /home/app/${PROJECT_NAME}/application.yml
    - cat cd/nginx.conf
    - cp cd/nginx.conf /home/app/${PROJECT_NAME}/nginx.conf
    - |
      if [ "$(docker ps -q -f name=${PROJECT_NAME}-api)" ]; then
            docker stop ${PROJECT_NAME}-api
      fi
      if [ "$(docker ps -q -f name=${PROJECT_NAME}-nginx)" ]; then
            docker stop ${PROJECT_NAME}-nginx
      fi
      if [ "$(docker ps -q -f name=${PROJECT_NAME}-db)" ]; then
            docker stop ${PROJECT_NAME}-db
      fi
    - |
      if [[ $CI_COMMIT_TAG == *"#resetapi"* ]]; then
        if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-api)" ]; then
          echo 'remove api container' && docker rm ${PROJECT_NAME}-api
        fi
      fi
    - |
      if [[ $CI_COMMIT_TAG == *"#backdb"* ]]; then
        echo 'backup db'
        NOW=$(date +"%Y-%m-%d-%H-%M-%S")
        tar czf /home/app/${PROJECT_NAME}/backups/dbbackup-$NOW.tar.gz /home/app/${PROJECT_NAME}/db
      fi
    - |
      if [[ $CI_COMMIT_TAG == *"#resetdb"* ]]; then
        if [[ $CI_COMMIT_TAG != *"#backdb"* ]]; then
          echo 'backup db'
          NOW=$(date +"%Y-%m-%d-%H-%M-%S")
          tar czf /home/app/${PROJECT_NAME}/backups/dbbackup-$NOW.tar.gz /home/app/${PROJECT_NAME}/db
        fi
        if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-db)" ]; then
          echo 'remove db container' && docker rm ${PROJECT_NAME}-db && rm -rf /home/app/${PROJECT_NAME}/db
        fi
      fi
    - |
      if [[ $CI_COMMIT_TAG == *"#resetnginx"* || $CI_COMMIT_TAG == *"#resetweb"* ]]; then
        if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-nginx)" ]; then
          echo 'remove nginx container' && docker rm ${PROJECT_NAME}-nginx
        fi
      fi
    - |
      docker network inspect ${PROJECT_NAME}-network >/dev/null 2>&1 || \
      docker network create --driver bridge ${PROJECT_NAME}-network
    - |
      if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-nginx)" ]; 
      then
        echo "${PROJECT_NAME}-nginx exist"
      else
        echo "create ${PROJECT_NAME}-nginx"
        docker create -p ${HTTP_EXPORT_PORT}:80 --cpus=1 --memory=1G --name=${PROJECT_NAME}-nginx \
        --network=${PROJECT_NAME}-network \
        -v /home/app/${PROJECT_NAME}/web:/usr/share/nginx/html:ro \
        -v /home/app/${PROJECT_NAME}/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
        nginx
      fi
    - |
      if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-db)" ]; 
      then
        echo "${PROJECT_NAME}-db exist"
      else
        echo "create ${PROJECT_NAME}-db"
        docker create --cpus=${DB_CPUS} --memory=${DB_MEMORY} --name=${PROJECT_NAME}-db \
        -p ${DB_EXPORT_PORT}:3306 \
        --network=${PROJECT_NAME}-network \
        -e MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD} -e MYSQL_DATABASE=${DB_NAME} \
        -e MYSQL_USER=${DB_USER} -e MYSQL_PASSWORD=${DB_PASSWORD} \
        -v /home/app/${PROJECT_NAME}/db:/var/lib/mysql \
        mysql:5.7 \
        --character-set-server=utf8mb4 \
        --collation-server=utf8mb4_unicode_ci
      fi
    - |
      if [ "$(docker ps -a -q -f name=${PROJECT_NAME}-api)" ]; 
      then
        echo "${PROJECT_NAME}-api exist"
      else
        echo "create ${PROJECT_NAME}-api"
        docker create --cpus=${API_CPUS} --memory=${API_MEMORY} --name=${PROJECT_NAME}-api \
        --network=${PROJECT_NAME}-network \
        --workdir=/opt/app \
        -v /home/app/${PROJECT_NAME}:/opt/app \
        adoptopenjdk/openjdk8:jre8u282-b08-debian \
        java -jar app.jar \
        --spring.config.location=/opt/app/
      fi
    - docker start ${PROJECT_NAME}-db
    - sleep 1m
    - docker start ${PROJECT_NAME}-api
    - docker start ${PROJECT_NAME}-nginx
    - docker ps
  rules:
    - if: $CI_COMMIT_TAG != null

dingding-error:
  stage: notify
  tags:
    - docker
  image: registry.cn-beijing.aliyuncs.com/mengyunzhi/dingding:1.0.0
  variables:
    GIT_STRATEGY: none
    SUCCESS: "false"
  script:
    - env
    - php /root/ding.php
  when: on_failure

dingding-success:
  stage: notify
  tags:
    - docker
  image: registry.cn-beijing.aliyuncs.com/mengyunzhi/dingding:1.0.0
  variables:
    GIT_STRATEGY: none
    # APP_URL: ""
  script:
    - env
    - php /root/ding.php


